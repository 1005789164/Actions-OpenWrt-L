#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
  schedule:
    - cron: 0 23 * * *
#  release:
#    types: [published]
#  push:
#    branches:
#    - master
#    paths:
#    - 'new3.config'
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/Lienol/openwrt.git
  REPO_BRANCH: dev-19.07
  D_CONFIG: l_new3.config
  DIY_SH: diy.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  TZ: Asia/Shanghai

jobs:
  build-openwrt:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install jq build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds clean && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -rf files openwrt/files
        [ -e $D_CONFIG ] && cp -f $D_CONFIG openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+2)) thread compile"
        make -j$(($(nproc)+2)) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p ${GITHUB_WORKSPACE}/firmware-squashfs-sysupgrade
        [ -e *squashfs-sysupgrade.bin ] && cp *squashfs-sysupgrade.bin ${GITHUB_WORKSPACE}/firmware-squashfs-sysupgrade
        if [ -e *.seed ]; then
          cp *.seed ${GITHUB_WORKSPACE}/firmware-squashfs-sysupgrade
        else
          cp ${GITHUB_WORKSPACE}/openwrt/.config ${GITHUB_WORKSPACE}/firmware-squashfs-sysupgrade/config.seed
        fi
        echo "::set-env name=FIRMWARE::$(pwd)"
        #echo "::set-env name=RELEASE_TAG::"$(TZ=UTC-8 date +"%Y.%m.%d")
        echo "::set-env name=RELEASE_TAG::OpenWrt-firmware"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload to release
      uses: 1005789164/action-release@1.0
      with:
        token: ${{ secrets.ACTION_TOKEN }}
        gzip: false
        files: >
          firmware-squashfs-sysupgrade/*
        allow_override: true

    - name: Push firmware
      env:
        PUSH_TOKEN: ${{ secrets.ACTION_TOKEN }}
      run: |
        # git clone --depth 1 https://github.com/${GITHUB_REPOSITORY}.git -b firmware firmware-branch
        mkdir -p firmware-branch
        cd firmware-branch
        git init
        [ -e ${RELEASE_TAG}.bin ] && rm -f ${RELEASE_TAG}.bin
        [ -e ${RELEASE_TAG}.seed ] && rm -f ${RELEASE_TAG}.seed
        [ -e ../firmware-squashfs-sysupgrade/*squashfs-sysupgrade.bin ] && cp ../firmware-squashfs-sysupgrade/*squashfs-sysupgrade.bin ${RELEASE_TAG}.bin
        [ -e ../firmware-squashfs-sysupgrade/*.seed ] && cp ../firmware-squashfs-sysupgrade/*.seed ${RELEASE_TAG}.seed
        ls -al
        # git checkout firmware
        git config --local user.email "BOT@github.com"
        git config --local user.name "BOT"
        git add -f ./
        git commit -m ".bin and .seed"
        git push --force --quiet https://${PUSH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:firmware
        